---
- name: Obtendo IP Publico para criação do SG
  uri: 
   url: http://ifconfig.me/ip
   return_content: yes
  register: public_ip_response

- name: Criando o Security Group
  local_action:
    module: ec2_group
    name: "{{ sec_group_name }}"
    description: sg remote da massa
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    rules:
    - proto: tcp
      from_port: 22
      to_port: 22
      cidr_ip: "{{ public_ip_response.content}}/32"
      rule_desc: Home SSH
    - proto: tcp
      from_port: 2379
      to_port: 2380
      cidr_ip: 172.31.80.0/20
      rule_desc: etcd server API
    - proto: tcp
      from_port: 6443
      to_port: 6443
      cidr_ip: 172.31.80.0/20
      rule_desc: kube-apiserver
    - proto: tcp
      from_port: 10250
      to_port: 10250
      cidr_ip: 172.31.80.0/20
      rule_desc: Kubelet API
    - proto: tcp
      from_port: 10251
      to_port: 10251
      cidr_ip: 172.31.80.0/20
      rule_desc: kube-scheduler
    - proto: tcp
      from_port: 10252
      to_port: 10252
      cidr_ip: 172.31.80.0/20
      rule_desc: kube-controller-manager
    - proto: tcp
      from_port: 10255
      to_port: 10255
      cidr_ip: 172.31.80.0/20
      rule_desc: Kubelet API Read-only
    - proto: tcp
      from_port: 30000
      to_port: 32767
      cidr_ip: 172.31.80.0/20
      rule_desc: NodePort Services
    - proto: tcp
      from_port: 6783
      to_port: 6783
      cidr_ip: 172.31.80.0/20
      rule_desc: WeaveNet
    - proto: udp
      from_port: 6783
      to_port: 6783
      cidr_ip: 172.31.80.0/20
      rule_desc: Weavenet
    - proto: udp
      from_port: 6784
      to_port: 6784
      cidr_ip: 172.31.80.0/20
      rule_desc: Weavenet
    rules_egress:
    - proto: all
      cidr_ip: 0.0.0.0/0
  register: basic_firewall


- name: Criando a instancia EC2
  local_action: ec2
    group="{{ sec_group_name }}"
    instance_type="{{ instance_type }}"
    image="{{ image  }}"
    profile="{{ aws_profile }}"
    region="{{ aws_region }}"
    keypair="{{ keypair }}"
    count="{{ count_instances}}"
    wait=true
    termination_protection=false
  register: ec2

- name: Add instancia para o inventario temporario
  add_host: name="{{ item.public_ip}}" groups=kubernetes
  with_items: "{{ ec2.instances }}"


- name: Add o IP publico das instancias no arquivo hosts do ansible
  local_action: lineinfile
    dest="./hosts"
    regexp="{{ item.public_ip }}"
    insertafter="[kubernetes]" line="{{ item.public_ip }}"
  with_items: "{{ ec2.instances }}" 

- name: Add o IP privado das instancias no arquivo hosts do ansible
  local_action: lineinfile
    dest="./hosts"
    regexp="{{item.private_ip}}"
    insertafter="[kubernetes]" line="{{ item.private_ip }}"
  with_items: "{{ ec2.instances}}"  


- name: Esperando o SSH
  local_action: wait_for
    host="{{ item.public_ip }}"
    port=22
    state="started"
  with_items: "{{ ec2.instances }}"

- name: Adicionando uma tag na instancia
  local_action: ec2_tag resource={{ item.id }} region={{ aws_region }} profile={{ aws_profile }} state=present
  with_items: "{{ ec2.instances }}"
  args:
    tags:
      Name: ansible-{{ item.ami_launch_index|int + 1 }}